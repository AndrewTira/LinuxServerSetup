---
- name: "FluxCD Get Started: Prerequisites & Flux CLI Setup"
  hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: "github_token"
      prompt: "Enter your GitHub Personal Access Token (with 'repo' scope)"
      private: yes
    - name: "github_owner"
      prompt: "Enter your GitHub username or organization (e.g., your-gh-username)"
      private: no
    - name: "github_repository_name"
      prompt: "Enter the GitHub repository name for Flux (e.g., my-flux-cluster-config)"
      private: no
    - name: "git_branch"
      prompt: "Enter the Git branch for Flux (e.g., main)"
      private: no
      default: "main"
    - name: "flux_cluster_config_path"
      prompt: "Enter the path within the repo for Flux to sync cluster configs (e.g., ./clusters/my-cluster)"
      private: no
      default: "./clusters/my-cluster"
    - name: "flux_cli_version"
      prompt: "Enter the desired Flux CLI version (e.g., 2.3.0 - check Flux docs for latest)"
      private: no
      default: "2.3.0" # VERIFY this against current Flux releases
    - name: "local_repo_clone_path" # MODIFIED PROMPT
      prompt: "Enter the FULL Filesystem Path to your EXISTING LOCAL CLONE of the Git repository (e.g., /home/user/my-flux-cluster-config)"
      private: no
      # No default, user must provide this path.

  # ... (Tasks for Flux CLI installation, verification, pre-flight checks - these remain the same as before) ...
  # ... (The tasks from the playbook you posted previously are correct for this section) ...
  tasks:
    - name: "Block for Flux CLI Installation (Linux amd64)"
      block:
        - name: "Check for existing Flux CLI and version"
          ansible.builtin.command: "flux --version"
          register: flux_cli_check
          ignore_errors: yes
          changed_when: false

        - name: "Install Flux CLI {{ flux_cli_version }} if not present or wrong version"
          when: flux_cli_check.failed or (flux_cli_version not in flux_cli_check.stdout)
          block:
            - name: "Download Flux CLI binary (Linux x86_64)"
              ansible.builtin.get_url:
                url: "https://github.com/fluxcd/flux2/releases/download/v{{ flux_cli_version }}/flux_{{ flux_cli_version }}_linux_amd64.tar.gz"
                dest: "/tmp/flux_{{ flux_cli_version }}_linux_amd64.tar.gz"
                mode: '0644'

            - name: "Create temporary directory for Flux CLI extraction"
              ansible.builtin.tempfile:
                state: directory
                suffix: flux_extract
              register: temp_flux_extract_dir

            - name: "Extract Flux CLI"
              ansible.builtin.unarchive:
                src: "/tmp/flux_{{ flux_cli_version }}_linux_amd64.tar.gz"
                dest: "{{ temp_flux_extract_dir.path }}"
                remote_src: yes

            - name: "Move Flux CLI to /usr/local/bin (requires sudo)"
              ansible.builtin.copy:
                src: "{{ temp_flux_extract_dir.path }}/flux"
                dest: "/usr/local/bin/flux"
                mode: '0755'
                remote_src: yes
              become: yes

            - name: "Clean up downloaded Flux CLI tarball"
              ansible.builtin.file:
                path: "/tmp/flux_{{ flux_cli_version }}_linux_amd64.tar.gz"
                state: absent

            - name: "Clean up Flux CLI extraction directory"
              ansible.builtin.file:
                path: "{{ temp_flux_extract_dir.path }}"
                state: absent
      rescue:
        - name: "Flux CLI installation block failed"
          ansible.builtin.debug:
            msg: "Flux CLI installation failed. Please ensure you have sudo permissions for /usr/local/bin or install Flux CLI (version {{ flux_cli_version }}) manually and ensure it's in your PATH. Then re-run the playbook. Error: {{ ansible_failed_result }}"
        - name: "End play due to Flux CLI installation failure"
          ansible.builtin.meta: end_play

    - name: "Get Flux CLI version after potential install"
      ansible.builtin.command: "flux --version"
      register: flux_version_check_after_install
      changed_when: false
      ignore_errors: yes

    - name: "Verify Flux CLI version is correct"
      ansible.builtin.assert:
        that:
          - flux_version_check_after_install.rc == 0
          - "'{{ flux_cli_version }}' in flux_version_check_after_install.stdout"
        fail_msg: >-
          Flux CLI version '{{ flux_cli_version }}' not found or command failed.
          RC: {{ flux_version_check_after_install.rc }}
          STDOUT: {{ flux_version_check_after_install.stdout | default('N/A') }}
          STDERR: {{ flux_version_check_after_install.stderr | default('N/A') }}
        quiet: yes

    - name: "Execute Flux pre-flight checks"
      ansible.builtin.command: "flux check --pre"
      register: flux_pre_check
      changed_when: false
      ignore_errors: yes

    - name: "Verify Flux pre-flight checks passed"
      ansible.builtin.assert:
        that:
          - flux_pre_check.rc == 0
        fail_msg: >-
          Flux pre-flight check failed. Please resolve the issues reported.
          RC: {{ flux_pre_check.rc }}
          STDOUT: {{ flux_pre_check.stdout | default('N/A') }}
          STDERR: {{ flux_pre_check.stderr | default('N/A') }}
        quiet: yes

- name: "FluxCD Get Started: Bootstrap Flux"
  hosts: localhost
  gather_facts: no
  # Vars are available from the previous play.

  tasks:
    - name: "Bootstrap FluxCD on the Kubernetes cluster (commits to remote Git repo)"
      ansible.builtin.command: >-
        flux bootstrap github
        --owner={{ github_owner }}
        --repository={{ github_repository_name }}
        --branch={{ git_branch }}
        --path={{ flux_cluster_config_path }}
        --namespace=flux-system
        --network-policy=false
        --personal-access-token={{ github_token }}
      environment:
        GITHUB_TOKEN: "{{ github_token }}"
        # KUBECONFIG: "/path/to/your/kubeconfig"
      register: flux_bootstrap_output
      changed_when: "'✔ reconciliation complete' in flux_bootstrap_output.stdout or '✔ bootstrapped' in flux_bootstrap_output.stdout or '✔ Components bootstrapped' in flux_bootstrap_output.stdout"
      failed_when: "flux_bootstrap_output.rc != 0 and not ('components are already installed' in flux_bootstrap_output.stderr or 'already has a GVK' in flux_bootstrap_output.stderr or 'already bootstrapped' in flux_bootstrap_output.stderr)"
      no_log: false

    - name: "Debug Flux bootstrap output"
      ansible.builtin.debug:
        var: flux_bootstrap_output.stdout_lines
        verbosity: 1

# MODIFIED PLAY for adding workload
- name: "FluxCD Get Started: Add Sample Podinfo Workload to Existing Local Git Clone"
  hosts: localhost
  gather_facts: no
  # Vars available

  vars:
    # Ensure flux_cluster_config_path does not start with './' for clean joining with local_repo_clone_path
    clean_flux_cluster_config_path: "{{ flux_cluster_config_path | regex_replace('^\\./', '') }}"
    # Define manifest paths relative to the root of the cloned repository
    podinfo_manifests_dir_in_repo: "{{ clean_flux_cluster_config_path }}/podinfo"
    podinfo_flux_sync_cr_filename: "podinfo-kustomization.yaml"
    podinfo_flux_sync_cr_repo_path: "{{ clean_flux_cluster_config_path }}/{{ podinfo_flux_sync_cr_filename }}"
    cluster_root_kustomization_repo_path: "{{ clean_flux_cluster_config_path }}/kustomization.yaml"
    podinfo_image_tag: "6.7.0" # VERIFY this against current Flux guide

  tasks:
    - name: "Block for Git operations and manifest creation in existing local clone"
      block:
        - name: "Ensure existing local Git repository is up-to-date"
          ansible.builtin.git:
            repo: "https://{{ github_owner }}:{{ github_token }}@github.com/{{ github_owner }}/{{ github_repository_name }}.git"
            dest: "{{ local_repo_clone_path }}" # User provided path to existing clone
            version: "{{ git_branch }}"
            force: yes # Ensures 'git pull' behavior, consider 'rebase: yes' if preferred
          no_log: true # Hide token in URL from logs
          register: git_pull_status
          failed_when: "git_pull_status.failed and 'Please commit your changes or stash them before you merge' not in git_pull_status.msg" # Allow pull to fail if local uncommitted changes exist, but fail on other errors.

        - name: "Inform user if local changes prevent pull (and pause)"
          ansible.builtin.pause:
            prompt: |
              WARNING: Your local Git repository at '{{ local_repo_clone_path }}' has uncommitted changes
              that conflict with upstream changes made by 'flux bootstrap'.
              Ansible cannot automatically resolve this.
              Please commit or stash your local changes in another terminal, then press Enter to retry pulling.
              Or, press Ctrl+C then 'A' to abort the playbook.
            echo: yes
          when: >
            git_pull_status.failed and
            ('Please commit your changes or stash them before you merge' in git_pull_status.msg or
             'Your local changes to the following files would be overwritten by merge' in git_pull_status.msg)

        - name: "Retry Git pull after user intervention (if needed)"
          ansible.builtin.git:
            repo: "https://{{ github_owner }}:{{ github_token }}@github.com/{{ github_owner }}/{{ github_repository_name }}.git"
            dest: "{{ local_repo_clone_path }}"
            version: "{{ git_branch }}"
            force: yes
          no_log: true
          when: > # Only retry if the previous pull failed due to local changes
            git_pull_status.failed and
            ('Please commit your changes or stash them before you merge' in git_pull_status.msg or
             'Your local changes to the following files would be overwritten by merge' in git_pull_status.msg)


        # --- Create Podinfo manifests in the local clone ---
        - name: "Create directory for Podinfo manifests in the local repo"
          ansible.builtin.file:
            path: "{{ local_repo_clone_path }}/{{ podinfo_manifests_dir_in_repo }}"
            state: directory
            mode: '0755'

        - name: "Create Podinfo Namespace manifest in the local repo"
          ansible.builtin.copy:
            dest: "{{ local_repo_clone_path }}/{{ podinfo_manifests_dir_in_repo }}/namespace.yaml"
            content: |
              apiVersion: v1
              kind: Namespace
              metadata:
                name: podinfo

        - name: "Create Podinfo Deployment and Service manifest in the local repo"
          ansible.builtin.copy:
            dest: "{{ local_repo_clone_path }}/{{ podinfo_manifests_dir_in_repo }}/deployment.yaml"
            content: |
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: podinfo
                namespace: podinfo
              spec:
                replicas: 2
                selector:
                  matchLabels:
                    app.kubernetes.io/name: podinfo
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: podinfo
                  spec:
                    containers:
                    - name: podinfo
                      image: "stefanprodan/podinfo:{{ podinfo_image_tag }}"
                      imagePullPolicy: IfNotPresent
                      ports:
                      - name: http
                        containerPort: 9898
                        protocol: TCP
                      command:
                        - ./podinfo
                        - --port=9898
                        - --ui-message='Hello from Flux, deployed by Ansible (local clone)!'
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: podinfo
                namespace: podinfo
              spec:
                type: ClusterIP
                selector:
                  app.kubernetes.io/name: podinfo
                ports:
                - port: 9898
                  targetPort: http
                  protocol: TCP

        - name: "Create Kustomization for Podinfo app manifests (in its own directory) in the local repo"
          ansible.builtin.copy:
            dest: "{{ local_repo_clone_path }}/{{ podinfo_manifests_dir_in_repo }}/kustomization.yaml"
            content: |
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              namespace: podinfo
              resources:
                - namespace.yaml
                - deployment.yaml

        - name: "Create Flux Kustomization CR to sync Podinfo workload in the local repo"
          ansible.builtin.copy:
            dest: "{{ local_repo_clone_path }}/{{ podinfo_flux_sync_cr_repo_path }}"
            content: |
              apiVersion: kustomize.toolkit.fluxcd.io/v1 # VERIFY API version
              kind: Kustomization
              metadata:
                name: podinfo
                namespace: flux-system
              spec:
                interval: 1m
                path: "./{{ podinfo_manifests_dir_in_repo | basename }}" # Path relative to this Kustomization's location
                prune: true
                sourceRef:
                  kind: GitRepository
                  name: flux-system
                wait: true
                timeout: 5m

        - name: "Ensure root kustomization.yaml for the cluster sync path exists in the local repo"
          ansible.builtin.copy:
            dest: "{{ local_repo_clone_path }}/{{ cluster_root_kustomization_repo_path }}"
            content: |
              apiVersion: kustomize.config.k8s.io/v1beta1
              kind: Kustomization
              resources: []
            force: no # Do not overwrite if it exists

        - name: "Add Flux Kustomization for Podinfo to the cluster's root kustomization.yaml resources list in the local repo"
          ansible.builtin.lineinfile:
            path: "{{ local_repo_clone_path }}/{{ cluster_root_kustomization_repo_path }}"
            regexp: "^(\\s*-\\s*{{ podinfo_flux_sync_cr_filename }})"
            line: "  - {{ podinfo_flux_sync_cr_filename }}"
            insertafter: "^resources:"
            create: yes # Will create if file doesn't exist, but copy task above should handle creation.

        # --- Git commit and push from the local clone ---
        - name: "Add all changes in the local repository to Git staging"
          ansible.builtin.command: "git add ."
          args:
            chdir: "{{ local_repo_clone_path }}"
          changed_when: true

        - name: "Commit changes to local Git repository"
          ansible.builtin.command: "git commit -m 'Add Podinfo sample workload via Ansible (to existing local clone)'"
          args:
            chdir: "{{ local_repo_clone_path }}"
          register: git_commit_status
          changed_when: "'nothing to commit' not in git_commit_status.stdout and 'no changes added to commit' not in git_commit_status.stdout"
          failed_when: "git_commit_status.rc != 0 and not ('nothing to commit' in git_commit_status.stdout or 'no changes added to commit' in git_commit_status.stdout)"

        - name: "Push changes from local Git repository to remote"
          ansible.builtin.command: "git push https://{{ github_owner }}:{{ github_token }}@github.com/{{ github_owner }}/{{ github_repository_name }}.git {{ git_branch }}"
          args:
            chdir: "{{ local_repo_clone_path }}"
          when: git_commit_status.changed
          changed_when: true
          no_log: true # Hide token in URL from logs
      rescue:
        - name: "Git operations or manifest creation in local clone failed"
          ansible.builtin.debug:
            msg: "An error occurred during Git operations or manifest creation in your local clone. Error: {{ ansible_failed_result }}"
        - name: "End play due to error in workload addition to local clone"
          ansible.builtin.meta: end_play

    - name: "Instruct user to check Flux and application status"
      ansible.builtin.debug:
        msg: |
          Podinfo workload manifests and Flux Kustomization CR have been added to your local Git repository
          at '{{ local_repo_clone_path }}' and pushed to '{{ github_owner }}/{{ github_repository_name }}'.
          Flux will now attempt to reconcile these changes from the Git repository.

          You can monitor the status with:
          kubectl -n flux-system get gitrepositories,kustomizations
          kubectl -n podinfo get deployments,services,pods (wait a minute or two for reconciliation)
          flux logs --all-namespaces --level=info