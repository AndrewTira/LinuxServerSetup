---
- name: "FluxCD Get Started: Prerequisites & Flux CLI Setup"
  hosts: localhost
  gather_facts: no

  vars_prompt:
    - name: "github_token"
      prompt: "Enter your GitHub Personal Access Token (PAT with 'repo' scope)"
      private: yes

    - name: "github_owner"
      prompt: "Enter your GitHub username or organization (e.g., your-gh-username)"
      private: no

    - name: "github_repository_name"
      prompt: "Enter the GitHub repository name for Flux (e.g., LinuxServerSetup)"
      private: no

    - name: "git_branch"
      prompt: "Enter the Git branch for Flux (e.g., main)"
      private: no
      default: "main"

    - name: "flux_git_repo_path"
      prompt: >-
        Enter the path WITHIN your Git repository where Flux will store its main config 
        and sync from. In your case: clusters/main-cluster
      private: no
      default: "./clusters/main-cluster"

    - name: "flux_cli_version"
      prompt: "Enter the desired Flux CLI version (e.g., 2.6.0)"
      private: no
      default: "2.6.0"

    - name: "local_git_repo_clone_path"
      prompt: >-
        Enter the FULL local filesystem path to your EXISTING CLONE of the Git repository 
        (e.g., /home/andrewt/Documents/Github/LinuxServerSetup)
      private: no

  tasks:
    - name: "Export vars for later plays"
      ansible.builtin.set_fact:
        github_token_global: "{{ github_token }}"
        github_owner_global: "{{ github_owner }}"
        github_repository_name_global: "{{ github_repository_name }}"
        git_branch_global: "{{ git_branch }}"
        flux_git_repo_path_global: "{{ flux_git_repo_path }}"
        flux_cli_version_global: "{{ flux_cli_version }}"
        local_git_repo_clone_path_global: "{{ local_git_repo_clone_path }}"
      no_log: true

    - block:
        - name: "Check for existing Flux CLI"
          ansible.builtin.command: "flux --version"
          register: flux_cli_check
          ignore_errors: yes
          changed_when: false

        - name: "Install Flux CLI {{ flux_cli_version_global }} if missing or wrong version"
          when: flux_cli_check.failed or (flux_cli_version_global not in flux_cli_check.stdout)
          block:
            - name: "Download Flux CLI v{{ flux_cli_version_global }} (Linux x86_64)"
              ansible.builtin.get_url:
                url: "https://github.com/fluxcd/flux2/releases/download/v{{ flux_cli_version_global }}/flux_{{ flux_cli_version_global }}_linux_amd64.tar.gz"
                dest: "/tmp/flux_{{ flux_cli_version_global }}_linux_amd64.tar.gz"
                mode: '0644'

            - name: "Create temp dir for Flux CLI extraction"
              ansible.builtin.tempfile:
                state: directory
                suffix: flux_extract
              register: temp_flux_extract_dir

            - name: "Extract Flux CLI"
              ansible.builtin.unarchive:
                src: "/tmp/flux_{{ flux_cli_version_global }}_linux_amd64.tar.gz"
                dest: "{{ temp_flux_extract_dir.path }}"
                remote_src: yes

            - name: "Copy Flux binary to /usr/local/bin"
              ansible.builtin.copy:
                src: "{{ temp_flux_extract_dir.path }}/flux"
                dest: "/usr/local/bin/flux"
                mode: '0755'
                remote_src: yes
              become: yes

            - name: "Remove Flux CLI tarball"
              ansible.builtin.file:
                path: "/tmp/flux_{{ flux_cli_version_global }}_linux_amd64.tar.gz"
                state: absent

            - name: "Remove temp extraction dir"
              ansible.builtin.file:
                path: "{{ temp_flux_extract_dir.path }}"
                state: absent
          rescue:
            - name: "Flux CLI install failed"
              ansible.builtin.debug:
                msg: |
                  Flux CLI installation failed. Ensure you have sudo access to /usr/local/bin 
                  or install Flux CLI v{{ flux_cli_version_global }} manually and re-run.
            - name: "Abort play"
              ansible.builtin.meta: end_play

        - name: "Verify Flux CLI is now installed"
          ansible.builtin.command: "flux --version"
          register: flux_version_check_after_install
          changed_when: false
          ignore_errors: yes

        - name: "Assert Flux CLI version is correct"
          ansible.builtin.assert:
            that:
              - flux_version_check_after_install.rc == 0
              - "flux_cli_version_global in flux_version_check_after_install.stdout"
            fail_msg: >-
              Flux CLI v{{ flux_cli_version_global }} not detected after install. 
              Please verify installation and PATH.
            quiet: yes

        - name: "Run Flux pre-flight checks"
          ansible.builtin.command: "flux check --pre"
          register: flux_pre_check
          changed_when: false
          ignore_errors: yes

        - name: "Assert Flux pre-flight checks passed"
          ansible.builtin.assert:
            that:
              - flux_pre_check.rc == 0
            fail_msg: >-
              Flux pre-flight check failed. Resolve any issues from 'flux check --pre' 
              before continuing.
            quiet: yes

      name: "Install & verify Flux CLI"


- name: "FluxCD Get Started: Bootstrap Flux"
  hosts: localhost
  gather_facts: no

  tasks:
    - name: "Bootstrap FluxCD (pushes manifests into Git)"
      ansible.builtin.command: >-
        flux bootstrap github
        --owner={{ github_owner_global }}
        --repository={{ github_repository_name_global }}
        --branch={{ git_branch_global }}
        --path={{ flux_git_repo_path_global }}
        --namespace=flux-system
        --network-policy=false
      environment:
        GITHUB_TOKEN: "{{ github_token_global }}"
      register: flux_bootstrap_output
      changed_when: >
        "reconciliation complete" in flux_bootstrap_output.stdout or
        "bootstrapped" in flux_bootstrap_output.stdout or
        "Components bootstrapped" in flux_bootstrap_output.stdout
      failed_when: >
        flux_bootstrap_output.rc != 0 and
        not (
          'components are already installed' in flux_bootstrap_output.stderr or
          'already has a GVK' in flux_bootstrap_output.stderr or
          'already bootstrapped' in flux_bootstrap_output.stderr
        )

    - name: "Display bootstrap output"
      ansible.builtin.debug:
        var: flux_bootstrap_output.stdout_lines
        verbosity: 1
