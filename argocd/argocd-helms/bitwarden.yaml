apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: bitwarden
  namespace: argocd
spec:
  destination:
    namespace: bitwarden
    server: https://kubernetes.default.svc
  project: default
  source:
    repoURL: https://charts.bitwarden.com/
    chart: self-host
    targetRevision: "2025.5.1"
    helm:
      values: |
        # Core Database Settings
        database:
          enabled: true
          mssql:
            edition: "express"
            existingSecret:
              enabled: false
            # WARNING: In production, saPassword should be passed securely via a Kubernetes Secret
            # and referenced by the chart, or managed by a secrets manager.
            # For this example, it's kept here as per your configuration.
            saPassword: "supersecure" # <--- Ensure this matches the password used in your bitwarden-sql-connection-string secret
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                cpu: 200m
                memory: 512Mi
            persistence:
              enabled: false # Set to true for persistent data

        # General Application Settings
        general:
          domain: "bitwarden.k3s.home" # <--- IMPORTANT: Your main domain for Bitwarden
          ingress:
            enabled: true # Keep true to use the chart's Ingress resource
            className: "nginx" # <--- IMPORTANT: Match your Ingress Controller class (e.g., "nginx", "traefik")
            # Annotations for cert-manager and Nginx redirect
            annotations:
              cert-manager.io/cluster-issuer: "letsencrypt-stag" # Your ClusterIssuer name for staging certs
              nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            # paths: # Uncomment and configure if custom path mapping is needed
            #   - path: /
            #     pathType: Prefix
            tls:
              name: "bitwarden-tls-secret" # <--- Name of the Secret cert-manager will create for the domain
              clusterIssuer: "letsencrypt-prod" # <--- Your ClusterIssuer name for production certs

          # Email Settings (for Gmail SMTP via STARTTLS on port 587)
          email:
            replyToEmail: "no-reply@vault.AndrewK3sBitwarden.com" # <--- A valid email or no-reply address
            smtpHost: "smtp.gmail.com"
            smtpPort: "587" # <--- Must be a string
            smtpSsl: "false" # <--- Must be a string (false for STARTTLS on 587, true for SSL on 465 usually)
            # smtpUsername and smtpPassword are often expected to come from the 'secrets.secretName'
            # (e.g., custom-secret) if the chart doesn't provide dedicated fields under general.email.
            # If the chart *does* provide `general.email.smtpUsername` and `general.email.smtpPassword`,
            # you would add them here, referencing your SMTP secret values.
            # Example (if supported by chart):
            # smtpUsername: "your-gmail-username@gmail.com"
            # smtpPassword: "your-app-password" # Use an app password for Gmail!

        # API and Web resources (from your previous values)
        api:
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi

        web:
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi

        # Component Enablement (from your previous values and new list)
        admin:
          enabled: false
        events:
          enabled: false
        notifications:
          enabled: false
        push:
          enabled: false
        component: # New based on your list
          scim:
            enabled: false # Default is false
        volume: # New based on your list
          logs:
            enabled: true # Recommended for troubleshooting

        # Secret Name for core Bitwarden configuration
        secrets:
          secretName: "custom-secret" # <--- Name of the main secret you created for Bitwarden settings
          # IMPORTANT NOTE REGARDING DATABASE MIGRATION JOB:
          # The 'bitwarden-db-pre-upgrade' job is a Helm pre-upgrade hook.
          # For the *initial deployment*, it often runs before the internal MSSQL server
          # is fully provisioned and ready to accept connections, leading to "Name or service not known" errors.
          # Resolution for initial deployment:
          # 1. Ensure 'bitwarden-sql-connection-string' secret is created correctly and separately.
          #    (See previous steps, it should point to 'Server=bitwarden-mssql-server,1433;Database=Bitwarden;User ID=sa;Password=<YOUR_SA_PASSWORD>;Encrypt=True;TrustServerCertificate=True;')
          # 2. Allow Argo CD to sync. The job will likely fail, but the MSSQL server and other components will deploy.
          # 3. Wait until 'bitwarden-mssql-server' pod is 'Running' and '1/1 READY'.
          #    (Use `kubectl get pods -n bitwarden -l app.kubernetes.io/component=mssql-server -w`)
          # 4. Manually delete the failed job: `kubectl delete job bitwarden-db-pre-upgrade -n bitwarden`
          # 5. Force another Argo CD sync: Go to UI -> Refresh -> Sync.
          #    The job should now recreate and succeed, completing the database setup.

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true