apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: vaultwarden
  namespace: argocd # Namespace where your Argo CD instance is running
spec:
  destination:
    namespace: vaultwarden # Namespace where Vaultwarden will be deployed
    server: https://kubernetes.default.svc
  project: default # Your Argo CD project (usually 'default' unless customized)
  source:
    repoURL: https://guerzon.github.io/vaultwarden # Official Helm chart repository for Vaultwarden
    chart: vaultwarden
    targetRevision: "0.32.0" # <--- IMPORTANT: Update to a recent, stable version like this one!
    helm:
      values: |
        # --- Vaultwarden Helm Chart Values ---

        # General application settings
        vaultwarden:
          # Your domain for accessing Vaultwarden (e.g., vault.yourdomain.com)
          # Make sure you have a DNS A record pointing this domain to your Ingress Controller's IP.
          domain: "https://vault.k3s.home" # Ensure protocol is included!

          # Admin Token for the web admin panel (optional but highly recommended for management)
          # IMPORTANT SECURITY NOTE:
          # NEVER hardcode this in Git for production. Generate a strong random string.
          # For production, use a Kubernetes Secret and reference it here using valueFrom.
          adminToken: "YOUR_VERY_STRONG_ADMIN_TOKEN_HERE" # <--- IMPORTANT: Replace with a real token!

          allowSignups: "true"
          verifySignup: "false"
          requireEmail: "false"
          logLevel: "info"

        # Ingress configuration for external access
        ingress:
          enabled: true
          className: "nginx" # <--- IMPORTANT: Match your Ingress Controller's class
          hostname: "vault.k3s.home" # <--- IMPORTANT: Match your domain
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
          tls:
            - hosts:
                - "vault.k3s.home"
              secretName: "vaultwarden-tls-secret"

        # Persistence for Vaultwarden's data
        persistence:
          enabled: true
          size: 5Gi
          storageClass: "" # <--- IMPORTANT: Specify your StorageClass if not using default (e.g., "longhorn")

        # Database configuration (for external PostgreSQL)
        database:
          type: "postgresql"
          # *** UPDATED CONNECTION STRING BASED ON YOUR POSTGRESQL MANIFEST ***
          connectionString: "Host=postgresql.postgresql.svc.cluster.local;Port=5432;Database=vaultwarden;Username=vaultwarden;Password=supersecure;Include Error Detail=True;"
          # IMPORTANT SECURITY NOTE:
          # NEVER hardcode passwords in Git for production.
          # Use a Kubernetes Secret and reference it here. Example:
          # connectionString:
          #   valueFrom:
          #     secretKeyRef:
          #       name: vaultwarden-db-secrets # Name of your K8s Secret in the 'vaultwarden' namespace
          #       key: postgres_connection_string # Key within that secret holding the connection string

        # Email (SMTP) configuration
        email:
          enabled: true
          smtpHost: "smtp.gmail.com"
          smtpPort: "587"
          smtpSsl: "false"
          smtpUsername: "your-gmail-account@gmail.com"
          smtpPassword: "your-gmail-app-password" # <--- Use a K8s Secret for this!
          smtpFrom: "Vaultwarden <no-reply@vault.k3s.home>"

        # Resource requests and limits
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true